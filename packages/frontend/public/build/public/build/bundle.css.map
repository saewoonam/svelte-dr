{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Loader.svelte",
    "../../Message.svelte",
    "../../MyCollapse.svelte",
    "../../SvgIcon.svelte",
    "../../Tchat.svelte",
    "../../TchatHeader.svelte",
    "../../TchatInput.svelte",
    "../../checkbox_list_component.svelte",
    "../../temperature_table.svelte",
    "../../uplot_v3.svelte",
    "../../Channel.svelte"
  ],
  "sourcesContent": [
    "<script>\nexport let loading = false;\n</script>\n<style>\n/* Center the loader */\n#spinner {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  z-index: 1;\n  width: 150px;\n  height: 150px;\n  margin: -75px 0 0 -75px;\n  border: 16px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 16px solid #3498db;\n  width: 120px;\n  height: 120px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n}\n\n@-webkit-keyframes spin {\n  0% { -webkit-transform: rotate(0deg); }\n  100% { -webkit-transform: rotate(360deg); }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>\n\n<div id=\"spinner\" style={loading ? \"display:block;\" : \"display:none;\"}></div>\n",
    "<script>\n  export let alignRight = false;\n  export let message = {\n    username: \"Unknown\",\n    message: \"\",\n    time: Date.now()\n  };\n</script>\n\n<style>\n  .root {\n    margin-bottom: 15px;\n  }\n\n  .time {\n    color: #a8aab1;\n    padding-left: 6px;\n  }\n\n  .message {\n    color: white;\n    padding: 18px 20px;\n    line-height: 26px;\n    font-size: 16px;\n    border-radius: 7px;\n    margin-bottom: 30px;\n    width: 90%;\n    position: relative;\n  }\n\n  .message:after {\n    bottom: 100%;\n    left: 7%;\n    border: solid transparent;\n    content: \" \";\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n    border-bottom-color: #86bb71;\n    border-width: 10px;\n    margin-left: -10px;\n  }\n\n  .my-message {\n    background: #86bb71;\n  }\n\n  .other-message {\n    background: #94c2ed;\n  }\n\n  .other-message:after {\n    border-bottom-color: #94c2ed;\n    left: 93%;\n  }\n\n  .online,\n  .me {\n    margin-right: 3px;\n    font-size: 10px;\n  }\n\n  .online {\n    color: #86bb71;\n  }\n\n  .me {\n    color: #94c2ed;\n  }\n\n  .align-right {\n    text-align: right;\n  }\n  .float-right {\n    float: right;\n  }\n</style>\n\n{#if alignRight}\n  <div>\n    <div class=\"root align-right\">\n      <span class=\"time\">\n        {`${new Date(message.time).toLocaleDateString()} ${new Date(message.time).toLocaleTimeString()}`}\n      </span>\n      &nbsp; &nbsp;\n      <span>{message.username}</span>\n      <i class=\"fa fa-circle me\" />\n    </div>\n    <div class=\"message other-message float-right\">{message.message}</div>\n  </div>\n{:else}\n  <div>\n    <div class=\"root\">\n      <span>\n        <i class=\"fa fa-circle online\" />\n        {message.username}\n      </span>\n      <span class=\"time\">\n        {`${new Date(message.time).toLocaleDateString()} ${new Date(message.time).toLocaleTimeString()}`}\n      </span>\n    </div>\n    <div class=\"message my-message\">{message.message}</div>\n  </div>\n{/if}\n",
    "<script>\n    import { createEventDispatcher } from 'svelte'\n    import collapse from 'svelte-collapse'\n    export let label='my collapse'\n\texport let menu = ['A', 'B', 'C']\n    export let choices = [...menu];\n    export let open = false\n    export let duration = 0.2\n    export let easing = 'ease'\n    const dispatch = createEventDispatcher()\n    function handleToggle () {\n        open = !open\n        if (open) {\n            dispatch('open')\n        }\n        else {\n            dispatch('close')\n        }\n    }\n</script> \n\n<style>\n\t.config { margin: 1em}\n\n    .card-header {\n        cursor: pointer;\n        user-select: none;\n    }\n\t.card-header:hover {\n  color: #FF0000;\n}\n</style>\n\n<div class='config' class:open aria-expanded={open} >\n\n    <div class='card-header' on:click={handleToggle}\n         style=\"margin:0.5em;cursor:pointer\"\n         onmouseover=\"this.style.color='red';\" onmouseout=\"this.style.color='';\"\n         >\n        {label}\n    </div>\n\n    <div class='card-body' use:collapse={{open, duration, easing}}>\n\t\t\t{#each menu as item}                                                \n\t\t\t<label>                                                         \n\t\t\t\t<input type=checkbox bind:group={choices} name=\"choices\" value={item}>\n\t\t\t\t{item}                                                      \n\t\t\t</label>                                                        \n\t\t\t{/each}   \n    </div>\n\n</div>\n\n",
    "<script>\nexport let fill = \"none\"\nexport let d = \"\"\n</script>\n\n<svg class=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 -2 24 24\" fill={fill} xmlns=\"http://www.w3.org/2000/svg\">\n<path d={d} stroke=\"#4A5568\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n<style>\n.icon{\n    position: relative;\n    display:inline-block;\n}\n</style>\n",
    "<script>\n  import { onMount, beforeUpdate, afterUpdate } from \"svelte\";\n  import { querystring } from \"svelte-spa-router\";\n\n  import { createChannelStore } from \"../channel/store\";\n  import Message from \"./Message.svelte\";\n  import TchatHeader from \"./TchatHeader.svelte\";\n  import TchatInput from \"./TchatInput.svelte\";\n\n  const getUsername = querystring => {\n    const match = querystring.match(/user=([^&]*)/);\n    return match ? match[1] : null;\n  };\n\n  export let channelId;\n  let messages = [];\n  let username = getUsername($querystring) || \"Unknown\";\n\n  let div;\n  let autoscroll;\n\n  beforeUpdate(() => {\n    autoscroll =\n      div && div.offsetHeight + div.scrollTop > div.scrollHeight - 20;\n  });\n\n  afterUpdate(() => {\n    if (autoscroll) div.scrollTo(0, div.scrollHeight);\n  });\n\n  const handleSendMessage = async e => {\n    await fetch(`http://localhost:3000/${channelId}/send`, {\n      body: JSON.stringify({\n        message: e.detail.text,\n        username,\n        time: Date.now()\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    });\n  };\n\n  onMount(() => {\n    const store = createChannelStore(channelId);\n\n    store.subscribe(incomingMessages => {\n      messages = incomingMessages;\n    });\n\n    return store.close;\n  });\n</script>\n\n<style>\n  .root {\n    margin: 0 auto;\n    width: 750px;\n    border-radius: 5px;\n    background: #f2f5f8;\n    border-radius: 5px;\n    color: #434651;\n  }\n\n  .root .history {\n    padding: 30px 30px 20px;\n    border-bottom: 2px solid white;\n    overflow-y: scroll;\n    max-height: 375px;\n  }\n\n  .root .history ul {\n    list-style-type: none;\n  }\n\n  .clearfix:after {\n    visibility: hidden;\n    display: block;\n    font-size: 0;\n    content: \" \";\n    clear: both;\n    height: 0;\n  }\n</style>\n\n<div class=\"root\">\n  <TchatHeader title={`Chat on ${channelId}`} messageCount={messages.length} />\n  <div class=\"history\" bind:this={div}>\n    <ul>\n      {#each messages as message, i}\n        <li class=\"clearfix\">\n          <Message alignRight={i % 2} {message} />\n        </li>\n      {/each}\n    </ul>\n  </div>\n  <TchatInput on:message={handleSendMessage} />\n</div>\n",
    "<script>\n  export let title = \"Chat\";\n  export let messageCount = 0;\n</script>\n\n<style>\n  .root {\n    padding: 20px;\n    border-bottom: 2px solid white;\n  }\n\n  .root img {\n    float: left;\n  }\n\n  .root .about {\n    float: left;\n    padding-left: 10px;\n    margin-top: 6px;\n  }\n\n  .root .with {\n    font-weight: bold;\n    font-size: 16px;\n  }\n\n  .root .num-messages {\n    color: #92959e;\n  }\n\n  .root .fa-star {\n    float: right;\n    color: #d8dadf;\n    font-size: 20px;\n    margin-top: 12px;\n  }\n\n  .clearfix:after {\n    visibility: hidden;\n    display: block;\n    font-size: 0;\n    content: \" \";\n    clear: both;\n    height: 0;\n  }\n</style>\n\n<div class=\"root clearfix\">\n  <img\n    src=\"./logo.png\"\n    alt=\"avatar\"\n    width=\"55\" />\n  <div class=\"about\">\n    <div class=\"with\">{title}</div>\n    <div class=\"num-messages\">\n      already {messageCount > 1 ? `${messageCount} messages` : `${messageCount} message`}\n    </div>\n  </div>\n  <i class=\"fa fa-star\" />\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n  let value = \"\";\n\n  const handleSubmit = () => {\n    dispatch(\"message\", { text: value });\n\n    value = \"\";\n  };\n</script>\n\n<style>\n  .root {\n    padding: 30px;\n  }\n\n  .root:after {\n    visibility: hidden;\n    display: block;\n    font-size: 0;\n    content: \" \";\n    clear: both;\n    height: 0;\n  }\n\n  textarea {\n    width: 100%;\n    border: none;\n    padding: 10px 20px;\n    font: 14px/22px \"Lato\", Arial, sans-serif;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    resize: none;\n  }\n\n  button {\n    float: right;\n    color: #94c2ed;\n    font-size: 16px;\n    text-transform: uppercase;\n    border: none;\n    cursor: pointer;\n    font-weight: bold;\n    background: #f2f5f8;\n  }\n\n  button:hover {\n    color: #75b1e8;\n  }\n</style>\n\n<div class=\"root\">\n  <textarea bind:value placeholder=\"Type your message\" rows=\"3\" />\n  <button on:click={handleSubmit}>Send</button>\n</div>\n",
    "<script>\n    export let controls = [\n        { value: false, text: 'He3 Pump A on' },\n        { value: false, text: 'He3 Pump B on' },\n        { value: false, text: 'He4 Pump A on' },\n        { value: false, text: 'He4 Pump B on' },\n        { value: false, text: 'He3 Heat Switch A on' },\n        { value: false, text: 'He3 Heat Switch B on' },\n        { value: false, text: 'He4 Heat Switch A on' },\n        { value: false, text: 'He4 Heat Switch B on' },\n    ];\n    export let manual_mode = true;\n</script>\n<style>\n    .disabled {\n        opacity: 0.4;\n    }\n    label {\n      width: 100%;\n      display: inline-block;\n    }\n</style>\n<br>\n<div style=\"margin:0.5em\">\n    <label>\n        <input\n                type=checkbox\n                bind:checked={manual_mode}\n                >\n                &nbsp Heaters Manual Mode\n    </label>\n    {#if manual_mode}\n        {#each controls as control}\n            <label class:disabled={!manual_mode}>\n                <input\n                        type=checkbox\n                        bind:checked={control.value}\n                        disabled = '{!manual_mode}'\n                        >\n                        &nbsp&nbsp{control.text}\n            </label>\n        {/each}\n    {/if}\n</div>\n",
    "<script>\n  export let title='temperature table'\n  export let table_data = {\n    '1k': 4.978491,\n    '4k': 3.070931,\n    pump: 6.659844,\n    switch: 17.41950,\n    hp: 0.000000,\n    hs: 4.000000,\n    relays: 0,\n  }\n  let table_array;\n  $: {\n    // console.log('table_data', table_data, Object.keys(table_data))\n    table_array = []\n    for (let key in table_data) {\n      let value = Number(table_data[key]);\n      value = Number.isInteger(value) ? value : value.toPrecision(4)\n      table_array.push({name: key, value:value})\n      // console.log('key', key);\n    }\n    // console.log('table_array', table_array);\n  }\n</script>\n<style>\n  td {\n    background-color: #E2E2E2;\n    padding: 0.5em;\n  }\n</style>\n<h4>\n  {title}\n</h4>\n<table>\n  <tbody>\n    {#each table_array as row}\n    <tr>\n      <td>{row.name}&nbsp&nbsp </td>\n      <td>&nbsp&nbsp{row.value}</td>\n    </tr>\n    {/each}\n  </tbody>\n</table>\n",
    "<script>\n    import uPlot from 'uplot';\n    import { onMount, afterUpdate } from 'svelte';\n    import {data_config, opts_config, colors} from '../tools/uplot_v3_config.js'\n    import {downloadBlob} from '../tools/download.js'\n    import SvgIcon from '../components/SvgIcon.svelte'\n    import LogIcon from '../components/LogIcon.svelte'\n    import LinIcon from '../components/LinIcon.svelte'\n    import {bellIcon, download, home, png} from '../components/AppIcons.js'\n    import filesaver from 'file-saver';\n    export let data = data_config;\n    export let opts = opts_config;\n    export let labels = ['y0', 'y1']\n    export let size = {\n            width: 600,\n            height: 400,\n        };\n\n    let plotDiv;\n    // let uPlot;\n    let uplot;\n    let html2canvas;\n    let autox = true;\n    let autoy = true;\n    let logy = 3;\n    // console.log(opts)\n    let y_range;\n    let x_range;\n\n    opts = {...opts, ...size};\n    opts.scales.x.auto = ()=> {return autox}\n    opts.scales.y.auto = ()=> {return autoy}\n    //console.log(opts.scales.y.range);\n    opts.scales.x.range = (self, min, max) => {\n        min = min==null ? min : parseFloat(min);\n        max = max==null ? max : parseFloat(max);\n        x_range = [min, max];\n        // console.log('x', x_range);\n        return x_range\n    }\n    opts.scales.y.range = (self, min, max) => {\n        console.log('before', min, max);\n        if (!autoy) {\n            let max_calc=[];\n            let min_calc=[];\n            for (let i=1; i<data.length; i++) {\n                max_calc.push(Math.max(...data[i]))\n                min_calc.push(Math.min(...data[i]))\n            }\n            max = Math.max(...max_calc);\n            min = Math.min(...min_calc);\n            console.log(min,max);\n            min = 0.1\n            max = 3\n            y_range = uPlot.rangeNum(min, max, 0.1, true);;\n        } else {\n            y_range = uPlot.rangeNum(0.1, 3, 0.1, true);;\n        }\n        console.log('y:', y_range)\n        return y_range;\n    }\n    opts.scales.y.range = null;\n    /*\n    opts['plugins'] =  [ \n       legendAsTooltipPlugin(),\n     ]\n    */\n    opts['plugins'] =  [ \n       wheelZoomPlugin(0.75),\n     ]\n    opts.cursor.bind.dblclick = (u, targ, handler) => {\n        return e => {\n            console.log('in dblclick')\n            autox = true;\n            autoy= true;\n            handler(e)              \n        } \n    }\n    opts.cursor.bind.mousemove = (u, targ, handler) => {\n        return e => {\n            if (e.buttons==1) {\n                autox = false;\n                autoy = false;\n                // console.log(e)\n                // console.log('mousemove button', e.button, 'buttons', e.buttons);\n            }\n            handler(e)\n        }\n    }\n    let s = [{}]\n    for (let i=0; i<data.length-1; i++) {\n        s.push({\n            spanGaps: true,\n            label: \"y\"+i,\n            stroke: colors[9-i],\n            width: 2\n        })\n    }\n    opts.series = s;\n    console.log('opts.series', opts.series)\n    opts.series[0] =  {\n      value: \"{YYYY}-{MM}-{DD} {HH}:{mm}:{ss}\"\n    }\n    // console.log('labels', labels);\n    labels.forEach((item, index) => {\n        opts.series[index+1].label = item; // offset index by 1, index 0: time\n    });\n    let mounted = false;\n    onMount(async () => {\n        /*\n        const module = await import ('uplot');\n        uPlot = module.default;\n        console.log(\"uplot onMount\")\n        uplot = new uPlot(opts,data,plotDiv); \n        mounted = true;\n        */\n        uplot = uPlot(opts,data,plotDiv); \n        mounted = true;\n\n        /*\n        const m = await import ('html2canvas');\n        html2canvas = m.default;\n        console.log(html2canvas)\n         */\n    });\n    /*\n    $: {console.log('data changed into uPlot, data.length', data.length);}\n    $: {console.log('labels changed into uPlot, label.length', labels.length);}\n    */\n    afterUpdate( ()=> {\n        // console.log('afterUpdate data[0].length', data[0].length)\n        if (mounted) {\n                if(uplot && autox && autoy) {\n                        uplot.setData(data);\n                        // console.log('setData with auto');\n                } else if (uplot) {\n                        // Not sure when to do the setData... before or after\n                        //   setScale\n                        uplot.setData(data, false);\n                        // console.log('setData with false');\n                        // console.log('uplot', uplot.scales);\n                        \n                        let xMin = uplot.scales.x.min;\n                        let xMax = uplot.scales.x.max;\n                        let yMin = uplot.scales.y.min;\n                        let yMax = uplot.scales.y.max;\n                        // console.log(xMin, xMax, yMin, yMax);\n                        uplot.setScale('x', {min:xMin, max:xMax});\n                        uplot.setScale('y', {min:yMin, max:yMax});\n                        // uplot.setData(data, false);\n                }\n                uplot.setSize(size);\n        }\n    })\n    function toggle_autox() {\n        autox = !autox;\n    }\n    function toggle_autoy() {\n        autoy = !autoy;\n    }\n    function resetAxis() {\n        autox = true;\n        autoy = true;\n        uplot.setData(data)\n    }\n    function toggle_logy() {\n        if (logy==3) {\n            logy = 1;\n        } else {\n            logy = 3;\n        }\n        opts.scales.y.distr = logy;\n        // Not sure which way is better...\n        // plotDiv.innerHTML = '';\n        plotDiv.removeChild(plotDiv.firstChild)\n        // console.log('toggle_logy', data.length);\n        uplot = new uPlot(opts,data,plotDiv); \n\n    }\n    function saveCanvas()  {\n        var canvas = document.querySelector(\".u-wrap > canvas:nth-child(2)\");\n        console.log(\"canvas\", canvas)\n        canvas.toBlob(function(blob) {\n            filesaver.saveAs(blob, \"uplot.png\");\n        });\n    }\n    function saveCanvas2() {\n            html2canvas(plotDiv).then(canvas => {\n                    document.body.appendChild(canvas)\n            });\n    }\n    function downloadData() {\n        console.log(\"Download file\");\n        const filename = 'fridge.json';\n        const blob = new Blob([JSON.stringify(data)], {type : 'application/json'});\n        downloadBlob(blob, filename);\n    }\nfunction wheelZoomPlugin(opts) {\n    let factor = opts.factor || 0.75;\n\n    let xMin, xMax, yMin, yMax, xRange, yRange;\n\n    function clamp(nRange, nMin, nMax, fRange, fMin, fMax) {\n        if (nRange > fRange) {\n            nMin = fMin;\n            nMax = fMax;\n        }\n        else if (nMin < fMin) {\n            nMin = fMin;\n            nMax = fMin + nRange;\n        }\n        else if (nMax > fMax) {\n            nMax = fMax;\n            nMin = fMax - nRange;\n        }\n        // turn off autoscale when data added\n        return [nMin, nMax];\n    }\n\n    return {\n        hooks: {\n            ready: u => {\n                xMin = u.scales.x.min;\n                xMax = u.scales.x.max;\n                yMin = u.scales.y.min;\n                yMax = u.scales.y.max;\n\n                xRange = xMax - xMin;\n                yRange = yMax - yMin;\n\n                let over = u.over;\n                let rect = over.getBoundingClientRect();\n\n                // wheel drag pan\n                over.addEventListener(\"mousedown\", e => {\n                    if (e.button == 1) {\n                        //\tplot.style.cursor = \"move\";\n                        e.preventDefault();\n\n                        let left0 = e.clientX;\n                        let top0 = e.clientY;\n\n                        let scXMin0 = u.scales.x.min;\n                        let scXMax0 = u.scales.x.max;\n                        // Remember y settings... somehow they get reset \n                        let scYMin0 = u.scales.y.min;\n                        let scYMax0= u.scales.y.max;\n                        \n\n                        let xUnitsPerPx = u.posToVal(1, 'x') - u.posToVal(0, 'x');\n                        let yUnitsPerPx = u.posToVal(1, 'y') - u.posToVal(0, 'y');\n\n                        function onmove(e) {\n                            e.preventDefault();\n\n                            autox = false;\n\n                            let left1 = e.clientX;\n                            let top1 = e.clientY;\n\n                            let dx = xUnitsPerPx * (left1 - left0);\n                            let dy = yUnitsPerPx * (top1 - top0);\n\n                            u.setScale('x', {\n                                    min: scXMin0 - dx,\n                                    max: scXMax0 - dx,\n                                });\n                            // set y scale so that they are not null\n                            u.setScale('y', {\n                                    min: scYMin0 - dy,\n                                    max: scYMax0 - dy,\n                                });\n                        }\n\n                        function onup(e) {\n                            document.removeEventListener(\"mousemove\", onmove);\n                            document.removeEventListener(\"mouseup\", onup);\n                        }\n\n                        document.addEventListener(\"mousemove\", onmove);\n                        document.addEventListener(\"mouseup\", onup);\n\n                    }\n                });\n\n                // wheel scroll zoom\n                over.addEventListener(\"wheel\", e => {\n                    e.preventDefault();\n\n                    let {left, top} = u.cursor;\n\n                    let leftPct = left/rect.width;\n                    let btmPct = 1 - top/rect.height;\n                    let xVal = u.posToVal(left, \"x\");\n                    let yVal = u.posToVal(top, \"y\");\n                    let oxRange = u.scales.x.max - u.scales.x.min;\n                    let oyRange = u.scales.y.max - u.scales.y.min;\n\n                    let nxRange = e.deltaY < 0 ? oxRange * factor : oxRange / factor;\n                    let nxMin = xVal - leftPct * nxRange;\n                    let nxMax = nxMin + nxRange;\n                    [nxMin, nxMax] = clamp(nxRange, nxMin, nxMax, xRange, xMin, xMax);\n\n                    let nyRange = e.deltaY < 0 ? oyRange * factor : oyRange / factor;\n                    let nyMin = yVal - btmPct * nyRange;\n                    let nyMax = nyMin + nyRange;\n                    [nyMin, nyMax] = clamp(nyRange, nyMin, nyMax, yRange, yMin, yMax);\n                    console.log('wheel', nxMin, nxMax, nyMin, nyMax);\n                    u.batch(() => {\n                    u.setScale(\"x\", {\n                            min: nxMin,\n                            max: nxMax,\n                        });\n\n                    u.setScale(\"y\", {\n                            min: nyMin,\n                            max: nyMax,\n                        });\n                    });\n                    // autox = false;\n                    // autoy = false;\n                });\n            }\n        }\n    };\n}\n\n    function legendAsTooltipPlugin({ className, style = { backgroundColor:\"rgba(255, 249, 196, 0.92)\", color: \"black\" } } = {}) {\n        let legendEl;\n\n        function init(u, opts) {\n            legendEl = u.root.querySelector(\".u-legend\");\n\n            legendEl.classList.remove(\"u-inline\");\n            className && legendEl.classList.add(className);\n\n            // console.log(legendEl)\n            \n\n            uPlot.assign(legendEl.style, {\n                textAlign: \"left\",\n                pointerEvents: \"none\",\n                display: \"none\",\n                position: \"absolute\",\n                left: 0,\n                top: 0,\n                // zIndex: 100,\n                // boxShadow: \"2px 2px 10px rgba(0,0,0,0.5)\",\n                // ...style\n            });\n            // hide series color markers\n            const idents = legendEl.querySelectorAll(\".u-marker\");\n\n            for (let i = 0; i < idents.length; i++)\n                idents[i].style.display = \"none\";\n\n            const overEl = u.root.querySelector(\".u-over\");\n            overEl.style.overflow = \"visible\";\n\n            // move legend into plot bounds\n            overEl.appendChild(legendEl);\n\n            // show/hide tooltip on enter/exit\n            overEl.addEventListener(\"mouseenter\", () => {legendEl.style.display = null;});\n            overEl.addEventListener(\"mouseleave\", () => {legendEl.style.display = \"none\";});\n\n            // let tooltip exit plot\n            //  overEl.style.overflow = \"visible\";\n        }\n\n        function update(u) {\n            const { left, top } = u.cursor;\n            legendEl.style.transform = \"translate(\" + left + \"px, \" + top + \"px)\";\n        }\n\n        return {\n            hooks: {\n                init: init,\n                setCursor: update,\n            }\n        };\n    }\n\n\n</script>\n<style>\n/* @import \"https://leeoniya.github.io/uPlot/dist/uPlot.min.css\"; */\nbutton {\n    font-size: 18px;\n    }\n</style>\n    <link rel=\"stylesheet\" href=\"https://leeoniya.github.io/uPlot/dist/uPlot.min.css\">\n    <div>\n        <button on:click={resetAxis}>\n            <SvgIcon d={home} />\n        </button>\n        <button on:click={toggle_logy}>\n            {#if logy==3}\n                <LinIcon />\n            {:else}\n                <LogIcon />\n            {/if}\n        </button>\n        <button on:click={saveCanvas}>\n            <SvgIcon d={png} />\n        </button>\n        <button on:click={downloadData}>\n            <SvgIcon d={download} />\n        </button>\n    </div>\n    <div bind:this={plotDiv}></div>\n\n\n",
    "<script>\n  import Tchat from \"../components/Tchat.svelte\";\n\n  export let params = {};\n\n</script>\n\n<style>\n  .root {\n    padding: 80px 0;\n  }\n</style>\n\n<div class=\"root\">\n  <Tchat channelId={params.id} />\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}